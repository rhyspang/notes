git status --short

有时候我们提交完了才发现漏掉了几个文件没有添加,或者提交信息写错了。	此时,可以运
行带有	 	--amend	 	选项的提交命令尝试重新提交:
$	git	commit	--amend
这个命令会将暂存区中的文件提交。	如果自上次提交以来你还未做任何修改(例如,在上次
提交后马上执行了此命令),那么快照会保持不变,而你所修改的只是提交信息。
文本编辑器启动后,可以看到之前的提交信息。	编辑后保存会覆盖原来的提交信息。
例如,你提交后发现忘记了暂存某些需要的修改,可以像下面这样操作:
$	git	commit	-m	'initial	commit'
$	git	add	forgotten_file
$	git	commit	--amend
最终你只会有一个提交	-	第二次提交将代替第一次提交的结果。

查看日志
git log --pretty=oneline


取消暂存的文件
git reset HEAD <file>...​ 	
git	reset	HEAD	CONTRIBUTING.md

撤消对文件的修改
git checkout -- <file>...
git	checkout	--	CONTRIBUTING.md

查看远程仓库
git remote 列出你指定的每一个远程服务器的简写。	
git remote -v显示需要读写远程仓库使用的Git保存的简写与其对应的URL。

添加远程仓库
git remote add <shortname> <url>

从远程仓库中抓取与拉取
git fetch [remote-name]


附注标签
git tag	-a v1.4	-m 'my	version	1.4'

轻量标签
git tag v1.4-lw

后期打标签
git tag	-a v1.2	9fceb02
9fceb02 是部分校验和, 可以用命令git log --pretty=oneline

共享标签
git push origin	[tagname]	
git push origin	--tags把所有不在远程仓库服务器上的标签全部传送到那里


Git别名
git config --global alias.ci commit
当要输入git commit时,只需要输入git ci
git config --global alias.unstage 'reset HEAD --'
这会使下面的两个命令等价:
$git unstage fileA
$git reset HEAD -- fileA
通常也会添加一个last命令,像这样:
$git config --global alias.last	'log -1	HEAD'
这样,可以轻松地看到最后一次提交




Git 分支
git log --oneline --decorate --graph --all
查看分支图
git checkout -b <branch name>
新建一个分支并切换到新分支
git checkout <branch name>
切换分支
git merge <branch name>
合并分支
git branch -d <branch name>
删除分支





